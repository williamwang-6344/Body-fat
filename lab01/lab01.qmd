---
title: "lab01"
format: 
  html:
    embed-resources: true
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r, message=FALSE}
library("tidyverse") # loads readr, dplyr, ggplot2, ...
# If you download the data file first you can read it in using the 
# readxl package if it's in your current working directory:
fdata = readxl::read_excel("ardd_fatalities_jun2023.xlsx", sheet = 2, skip = 4, na = c("","-9"), guess_max = 1e6)
glimpse(fdata)
fdata = fdata |> janitor::clean_names()
fdata$crash_id|> unique()|> length()
```

You can add options to executable code like this

```{r, message=FALSE}
path = "https://github.com/DATA2002/data/raw/master/Cereal.csv"
cereal = readr::read_csv(path, na = "-1")
glimpse(cereal)
# -1 replace to missing value 
```

The `echo: false` option disables the printing of code (only output is displayed).
```{r, message=FALSE}
y_i = c(102, 32, 12, 4)
p_i = c(0.69, 0.21, 0.07, 0.03)
n = sum(y_i)
e_i = n * p_i
e_i
# expected value need to be >=5 therefore education and home need to be merged into one
p_i = c(0.69,0.21,0.1)
y_i = c(102,32,16)
e_i = sum(y_i)*p_i
ts = sum(((y_i-e_i)^2/e_i))
pchisq(ts,df=2,lower.tail=F)
```
```{r, message=FALSE}
y_i = c( 44 ,24  , 13 ,19  )
p_i = c(0.5, 0.2, 0.1, 0.2)
n = sum( y_i )
e_i = n * p_i
ts = sum(((y_i-e_i)^2/e_i))
pchisq(ts,df=3,lower.tail=F)
```
```{r, message=FALSE}
# fatalities data
fdata = readxl::read_excel("ardd_fatalities_jun2023.xlsx", 
                           sheet = 2, 
                           skip = 4, 
                           na = c("","-9"), 
                           guess_max = 1e6) |> 
  janitor::clean_names()

# crash data
cdata = fdata |> 
  select(-road_user, -gender, -age, -age_group) |> 
  distinct() |> 
  group_by(crash_id) |> 
  slice(1) |> 
  ungroup() |> 
  mutate(hour = lubridate::hour(time))
#1 
#How are missing values recorded, and why might they occur?
#N/A miss recording



```
```{r, message=FALSE}
#2How many fatalities occurred since 1989? How many fatal crashes have there been since 1989? 
cdata|> filter(year >=1989) |> nrow() 
```
```{r, message=FALSE}
#3What is the most common hour of the day for a fatal crash?
ggplot(cdata , aes(hour)) + geom_histogram(binwidth=1,color="black", fill="white")
#15
```
```{r}
#4What is the most common day of the week for a fatal crash?
ggplot(cdata , aes(day_of_week)) + geom_bar()
#weekday
```
```{r}
#5 What is the most common month for a fatal crash?
ggplot(cdata , aes(month)) + geom_bar()
# March
```
```{r}
ndata = filter(cdata, year == 2019)

ggplot(ndata , aes(month)) + geom_bar()
```
```{r}
#6
y_i = c(6, 9, 15)
e_i = c( 10 , 10 , 10 )
ts = sum(((y_i-e_i)^2/e_i))
pchisq(ts,df=2,lower.tail=F)
```

